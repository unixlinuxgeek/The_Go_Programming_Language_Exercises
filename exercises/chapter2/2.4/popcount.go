// Упражнение 2.4
// Напишите версию PopCount, которая подсчитывает биты с помощью сдвига аргумента
// по всем 64 позициям, проверяя при каждом сдвиге крайний справа бит.
// Сравните производительность этой версии с выборкой из таблицы.
// ```x&(x)```  сбрасывает крайний справа ненулевой бит x.

package popcount

import (
	"fmt"
	"os"
)

// pc[i] - количество единичных битов в i.
var pc [256]byte

func init() {
	for i := range pc {
		pc[i] = pc[i/2] + byte(i&1)
	}
}

// При сдвиге влево старший бит теряется и
// Оператор сдвига влево обычно записывается как «<<».
func PopCount(x uint64) int {
	var s byte
	for i := 0; i < 64; i++ {
		c := pc[x&(x)] // проверяем крайний справа ненулевой бит
		fmt.Fprintf(os.Stdout, "Крайний справа ненулевой бит: %d\n", c)
		s = pc[byte(x>>(i*8))]
	}

	return int(s)
}

// Демонстрация побитового сдвига влево и вправо
func BitShiftDemo() {
	// 0010 -> 0100
	l := BitShiftLeft(0010, 1) //
	fmt.Fprintf(os.Stdout, "%d\n", l)

	// 0010 -> 1000
	r := BitShiftRight(0010, 2)
	fmt.Fprintf(os.Stdout, "%d\n", r)
}
